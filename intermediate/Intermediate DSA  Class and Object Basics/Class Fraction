Problem Description
Construct a class Fraction which stores a fraction. It should contain the

-Numerator
-Denominator

Assume denominator will never be 0.

The class should support the following functionalities

add(Fraction) -> Returns the sum of two fractions

subtract(Fraction) -> Returns the difference of two fractions

multiply(Fraction) -> Returns the product of two fractions

The fraction returned needs to be in the simplest form. If the fraction is p/q then p and q must be co-prime.

You may define any properties in the class as you see appropriate.



class Fraction:

    def __init__(self, numerator=0, denominator=0):
        self.numerator = numerator
        self.denominator = denominator
     
    def computeGCD(self, numerator, denominator):
        # --Using Euclidean Algorithm 
        # while denominator:
        #     numerator, denominator = denominator, numerator % denominator
        # return numerator

        # --Using Recursion
        if denominator == 0:
            return abs(numerator)
        else:
            return self.computeGCD(denominator, numerator % denominator)

    def add(self, other):
        a = self.numerator
        b = self.denominator
        c = other.numerator
        d = other.denominator

        Numerator = (a * d + b * c)
        Denominator = b * d
        gcd = self.computeGCD(Numerator , Denominator)

        Numerator //= gcd
        Denominator //= gcd
        return Fraction(Numerator, Denominator)
    
    def subtract(self, other):
        a = self.numerator
        b = self.denominator
        c = other.numerator
        d = other.denominator

        Numerator = (a * d - b * c)
        Denominator = b * d
        gcd = self.computeGCD(Numerator , Denominator)

        Numerator //= gcd
        Denominator //= gcd
        return Fraction(Numerator, Denominator)

    def multiply(self, other):
        a = self.numerator
        b = self.denominator
        c = other.numerator
        d = other.denominator

        Numerator = a * c
        Denominator = b * d
        gcd = self.computeGCD(Numerator , Denominator)

        Numerator //= gcd
        Denominator //= gcd
        return Fraction(Numerator, Denominator)

x = Fraction(2, 3) # 2/3
y = Fraction(4, 5) # 4/5
z = x.add(y) # 22/15
z = x.subtract(y) # -2/15
z = x.multiply(y) # 8/15


